vnote_backup_file_826537664 C:/Users/99789/Documents/vnote_notebooks/Study/Software Construction/课堂笔记.md
# 课堂笔记
[toc]
## 6.面向可维护性的软件构造方法
### 6.1 可维护性的衡量和构造原则
#### 1. 软件可维护性
**维护：** 软件的生命周期进程
**优秀的 debug 技能** 
1. 诊断
2. 测试
3. 书写规格说明

**修正代码之后**
1. 正确测试规格说明
2. 回归性错误的检验
3. 更改所有的文档

**软件维护的种类**
1. 纠正性维护（Corrective maintenance） -25%
2. 适应性维护（Adaptive maintenance）   -21%
3. 完善性维护（Perfective maintenance）  -50%
4. 预防性维护（Preventive maintenance） -4%

**Lehman's Laws on Software Evolution**
Eight laws were formulated：
- 反馈系统 (Feedback System)
- 持续的改变 (Continuing Change)
- 持续的增长 (Continuing Growth)
- 下滑的质量 (Declining Quality)
- 增加的复杂度 (Increasing Complexity)
- 自我校准 (Self Regulation)
    - Conservation of Organizational Stability
    - Conservation of Familiarity

**熵 Entropy**    
物理意义是系统混乱程度的度量
![](_v_images/_1524365911_14301.png)    

#### 2. 可维护性的度量

**一些公共的可维护性的度量**
1. 循环复杂度（Cyclomatic Complexity）- 测量代码的结构复杂性
    - 通过计算在一个程序流中不同代码路径的数量
2. 代码的行数（Lines of Code）- 指代码大概的行数
    - 一个很大的数字说明这个类型或方法试图去做很多事情，应该把他分成不同的部分
    - 也说明这个类型或方法是很难去维持的。
3. 运算符和操作数的数目（Halstead Volume）[^1]
4. Maintainability Index（MI）-index 在0-100之间，越高说明可维护性越好
    - HV
    - CC
    - LOC（The average number of lines of code per module）
    - COM（The percentage of comment lines per module）

$$ 171 - 5.2 \ln (HV) - 0.23CC - 16.2 \ln (LOC) + 50.0 \sin \sqrt{2.46 * COM}$$

5. 继承的深度（Depth of Inheritance）- 继承的越深，代码越难以理解
6. 类连接（Class Coupling）[^2]
    - 一个好的软件设计要求类和方法都应该有高的结合度和低的连接度。
7. 单元测试覆盖率（Unit test coverage）

#### 3. 模块化设计及其原则
**Modular Programming**    
- 模块化编程通常是指高水平的代码的分解从一个完整的程序到片段，并且有广泛的使用结构化编程和OOP
    - 结构化编程是指结构化控制流中底层代码的使用
    - OOP是指对象的数据使用方式
- 这种设计的目标是把系统分割为模块并且在每个部分之间分配职责，用：
    - `High cohesion` within modules
    - `Loose coupling` between modules
- 模块化减少了程序员不得不解决的整个复杂度
    - 关注分离
    - 信息隐藏
- `The principles of cohesion and coupling are probably the most important design principles for evaluating the maintainability ofa dasign`
##### 1) 评价模块化的 5 个标准
- Decomposability（可分解性）
    - 将问题分解为各个可独立解决的子问题
    - 目标：使模块之间的依赖关系显示化
    - ![](_v_images/_1524387833_8558.png)
    - 例子：top-down structural design
- Composability（可组合性）
    - 可容易的将模块组合起来形成新的系统
    - 目标：使模块可在不同的环境下复用
    - ![](_v_images/_1524387849_26725.png)
    - 例子：Math libraries； Unix command &pipes
- Understandability（可理解性）[^3]
    - 每个子模块都可被系统设计者容易的理解
    - ![](_v_images/_1524387864_10201.png)
- Continuity（可持续性）
    - 小的变化将只影响一小部分模块，而不会影响整个体系结构
    - 例子：符号型变量； 模块提供的所有服务应该通过统一标识提供
    - ![](_v_images/_1524387778_6185.png)
- Protection（出现异常后的保护）
    - 运行时的不正常将局限于小范围模块内
    - ![](_v_images/_1524387884_13921.png)
    - 例子：验证源输入（Validating input at source）

##### 2) 模块化设计的5个原则
- 直接映射（Direct Mapping）
    - 模块的结构与现实世界中问题领域的结构保持一致
    - 对以下评价标准产生影响
        - 持续性（Continuity）：更加简单的去评估和限制改变的影响
        - 可分解性（Decomposability）：将问题域模型分解为软件分解的良好起点。
- 尽可能少的接口（Few Interfaces）
    - 模块应尽可能少的与其他模块通讯
    - 通讯路径的数目：$$ n-1, n(n-1)/2, n-1 
    - ![](_v_images/_1524388923_17999.png)
    - 会对可持续性，保护性，可理解性，可组合性产生影响
- 尽可能小的接口（Small Interfaces）
    - 如果两个模块通讯，那么它们应交换尽可能少的信息
    - ![](_v_images/_1524389065_15711.png)
        - 限制模块之间通讯的“带宽”
        - 对“可持续性”和“保护性”产生影响
- 显示接口（Explicit Interfaces）
    - 当 A 与 B 通讯时，应明显的发生在 A 与 B 接口之间
    - 对“可分解性”，“可组合性”，“可持续性”，“可理解性”产生影响
    - 反例
    - ![](_v_images/_1524451556_5704.png)
- 信息隐藏（Information Hiding）
    - 经常可能发生变化的设计决策应尽可能隐藏在抽象接口后面
    - 对“可持续性”产生影响

***强调*** Rule 2-3-4

- Few Interfaces : " Don't talk to many " ** 不要对太多人讲话**
- Small Interfaces : " Don't talk a lot" **不要讲太多**
- Explicit Interfaces: " Talk loud and in public ,Don't whisper" **公开的大声讲话，不要私下嘀咕**

##### 3) 连接与结合
**连接**

- 连接是模块间独立性的一种衡量
- 模块间的连接的程度决定于
    - 模块间接口的数目
    - 每一个接口的复杂度

**结合**

- 结合是一个模块内部功能的联系是否紧密的一种衡量
- 一个模型有很高的结合度，说明它的元素都为一个目标工作

最好的设计是有`高的结合度`和`低的连接度`（Strong cohesion And Weak coupling)
![](_v_images/_1524452917_5993.png)

#### 4. 面向对象的设计原则：SOLID
- 单一责任原则
- 开放封闭原则
- Liskov替换原则
- 接口隔离原则
- 依赖转换原则

##### 1) Single responsibility principle(SRP)
引起类变化的原因只有一个，专心做一件事情    
反例：    
![](_v_images/_1524453415_21548.png)
![](_v_images/_1524453436_7972.png)

##### 2) Open/ closed principle(OCP)
> - Software entities(classes, modules, functions, etc.) should be open for extension, but closed for modification. 
> - Change a class's behavior using inheritance and composition

- 对扩展性的开放
    - 模块的行为应是可扩展的，从而该模块可表现出新的行为以满足需求的变化
- 对修改的封闭
    - 模块自身的代码是不应被修改的
    - 扩展模块行为的一般途径是修改模块的内部实现
    - 如果一个模块不能被修改，那么它通常是被认为具有固定的行为。
- 解决问题的关键在于：**抽象技术** 

![](_v_images/_1524457834_31408.png)
**Bad example**
```java
class GraphicEditor{
    public void drawShape(Shape s){
        if (s.t==1)
            drawRec(s);
        else if (s.t==2)
            drawCir(s);
    }
    public void drawRec(Rec r){}
    public void drawCir(Rec r){}
}
class Shape{
    int t;
}
class Rec extends Shape{
    Rec(){
        super.t= 1;
    }
}
class Cir extends Shape{
    Cir(){
        super.t= 2;
    }
}
```
有几个问题
1. 必须修改`GraphEditor`才能添加一个新的`Shape`
2. `GraphEditor`和`Shape`的连接太紧密
3. 必须要`GraphEditor`的参与才能去测试一个特定的`Shape`
4. `if-else-/case` 应该避免使用
**Good example**
```java
class GraphEditor{
    public void drawShape(Shape s){
        s.draw();
    }
}
class Shape{
    abstract void draw();
}
class Rec extends Shape{
    public void draw(){
    }
}
```
**Single Choice**
无论什么时候软件系统都必须支持一组替代方案，系统中有且只有一个模块应该知道他们的详尽列表。

##### 3) Liskov substitution principle（LSP）
> Functions that use pointers or references to base classes must be able to use objects of derived classes without knowing it 

- 关注的是“操作”的可替换性
- LSP：子类型必须能够替换其基类型

##### 4) Interface segregation principle(ISP)

### 6.2 面向可维护性的设计模式
- 创建型模式
    - 工厂方法模式
    - 抽象工厂模式
    - 建造者模式
- 结构型模式
    - 桥接模式
    - 
### 6.3

## 10. 并行与分布式编程
### 10.1 并行性与线程安全
#### 1. 并发编程
多个运算同时发生

**原因有三**
- 处理器时钟速度不再增加
- 新一代芯片都会有很多的内核
- 为了让计算更快运行，我们必须将计算分解为并发模块

**两种常见的并发模型**
- 共享内存![](_v_images/_1528070017_4885.png)
    - 例子
        - 两个处理器共享内存
        - 两个程序共享文件
        - 两个线程共享对象
- 消息传递![](_v_images/_1528070039_3370.png)
    - 例子
        - 网络中两台计算机通信
        - web 浏览器和 web server
        - 即使消息的客户端和服务器
        - 通过管道连接两个程序的输入和输出

#### 2. 进程，线程
进程和线程是两种不同的并发模块
- 进程是正在运行程序的一个实例，它拥有自己私有专用的内存空间
- 线程是正在运行程序的一个执行路径（一个进程可以对应多个线程），每个线程有自己独立的堆栈和局部变量，但是多个线程共享内存空间。

##### 1) 进程
进程可抽象成虚拟计算机，拥有独立的执行环境和完整的资源（内存空间）
- 它使得这个程序好像自己独自占有整台机器

**进程通常不共享内存**
- 进程不能访问其他进程的内存或对象
- 需要特殊机制才能实现进程间共享内存
- 进程通信采用的是消息传递方式（因采用标准 I/O 流）

进程通常被视为程序或者应用，但**事实上，应用程序可能是一组协作进程**，为了实现进程间通信，大多数操作系统都支持“进程间通信（IPC）资源，例如管道和socket
- IPC 不仅在同一系统的不同进程中使用，而且可以在不同系统的进程中被用到。

Java虚拟机本身的大多数实现都是作为单个进程运行的
##### 2) 线程
线程可抽象为一个虚拟处理器，有时也被称为轻量级进程。线程与进程中的其他线程共享共同的资源（内存，打开文件等），即”**线程存在于进程内**。

线程采用内存共享机制通信，需要特殊处理才能实现**消息传递和私有内存**。

![](_v_images/_1528073346_6730.png)

每一个应用程序至少有一个线程，从 main 线程开始，创建其他的线程。

两个创建线程的方法
- （很少用）创建 Thread 类的子类
- （大多数）实现 Runnable 接口，作为参数传递给 new Thread() 构造函数

所有的线程都需要实现 Runnable 接口，在 run() 中写具体实现
```java
public interface Runnable {
    void run();
}

//Method1 Subclasss Thread
public class HelloThread extends Thread{
    public void run(){
        System.out.println("Hello");
    }
    public static void main(String args[]){
        (new HelloThread()).start();
        (new HelloThread()).start();
        (new HelloThread()).start();
    }
}
//Method2 Provide a Runnable object
public class HelloRunnable implements Runnable{
    public void run(){
        System.out.println("Hello");
    }
    public static void main(String args[]){
        (new Thread(new HelloRunnable())).start();
    }
}
```

惯用法：用一个匿名的`Runnable`启动一个线程，它避免了创建命名的类
```java
    new Thread(new Runnable(){
        public void run(){
            System.out.println("hello");
        }
    }).start();
```
注：new Runnable () {...} 不是实例化 Runnable 接口（java 不支持对接口的实例化），实际是上一种内部类的简写
- 1. 构造一个实现 Runnable 接口的无名 local 内部类（方法内的内部类）
- 2. 构造这个无名 local 内部类的一个实例
- 3. 用 Runnable 来表示这个无名 local 内部类的类型（OO多态）。

#### 3. 交叉存取与竞争条件
**时间切片**

一个运行核心上只有一个线程可以运行
- 进程 / 线程等采用 OS 提供的时间片特征来共享处理时间
- 当线程数多于处理器数量时，并发性通过时间片来模拟，处理器切换处理不同的线程。

**时间片的例子**
![时间片的例子](_v_images/_时间片的例子_1528097120_23552.png)

时间片的使用是不可预知和非确定性的，这意味着线程可能随时暂停或恢复。

共享内存可能会导致微妙的错误。

竞争条件：程序的正确性（后置条件和不变量的满足）取决于并发计算 A 和 B 中事件的相对时间，也叫（线程干扰）（Thread Interference）

**调整代码无济于事**，不能仅仅从 Java 代码中看出处理器将如何执行它，也无法通过观察一个表达式来判断它是否会在竞赛状态下安全。

**消息传递的例子**
模块之间通过消息传递进行交互
- 消息接收方将接受到的消息形成队列逐一处理（先进先出）
- 消息发送者并不停下来等待结果而是继续执行（异步方式）

消息传递的方式并不能消除竞争条件的可能性，在 Java 中，采用 happened-before 机制，保证了语句 A 内存的写入对语句 B 是可见的，从而确保内存一致性。

#### 4. 线程安全
数据类型或静态方法在线程中执行时，无论如何执行，不需要调用者做额外的协作，仍然能够行为正确，则称为线程安全。
- 行为正确意味着满足规格说明和保持不变性
- 不能在前置条件中对调用者增加时间性要求 

Iterator 不是线程安全的，因为需要满足特殊约定

**保证线程安全的四个方法**
- 限制可变变量的共享
- 用不可变的共享变量
- 将共享数据封装在线程安全的数据类型中
- 使用同步来防止线程同时访问变量

##### 1) Confinement
通过将数据限制在单个线程中，可以避免线程在可变数据上进行竞争

**限制可变变量[^4]**
- 局部变量保存在线程栈中，每一个调用都有自己的变量副本
- 局部变量如果是对象的引用，则要确保不能引用任何其他线程可访问的对象

 ![](_v_images/_1528192737_8846.png)

**避免全局变量**
- 全局静态变量不会自动收到线程访问限制
    - 如果使用了全局静态变量，则应说明只有一个线程会使用它们。
- 在多线程环境中，取消全局变量

##### 2) Immutability
使用不可变的引用和数据类型
- 不可变解决了因为共享可变数据造成的竞争，并简单地通过使共享数据不可变来解决他。

`final` 变量是不可变的引用，所以声明为`final`的变量可以安全的从多个线程访问。
- 因为这种安全性只适用于变量本身，仍然必须确保变量指向的对象是不可变的。

回顾 3.3 不可变性
- 类型是不可变的：如果类型的对象在其整个生命周期中始终表示相同的抽象值
- 但实际上，允许对 rep 进行修改，只要这些改变对客户是不可变的，并且对应的抽象值不变，，例如有益的突变。
- 但是对于并发性，这种隐藏的变化是不安全的，使用有益的变化的不可变数据类型必须使用锁来使自己线程安全。

**更强的不可变性的定义**
- 没有改变数据的操作
    - don not provide "`setter`"methods
- 所有字段均为 private 和 final
    - make all fields `final`and`private`
- 没有表示泄露
    - 不允许子类重写方法
        - 类声明为`final`
        - 更复杂的方法是使构造函数为私有，并使用工厂方法构造实例[^5]
- 表示中的任何可变对象都不能变化
    - 不提供修改可变对象的方法
    - 不要共享对可变对象的引用
    - 不存储传递给构造函数的外部可变对象的引用
    - 避免在方法返回值中包含对可变对象的引用

##### 3) Using Threadsafe Data Types
将共享的可变数据存储在线程安全的数据类型中

因为线程安全的数据类型性能较差，所以 Java 对一些可变数据类型提供了两种方式选择：线程安全的和线程不安全的，比如：
- `StringBuffer` 和 `StringBuilder` 都是可变数据类型，功能基本相同
- `StringBuffer` 是线程安全的，`StringBuilder` 不是
- `StringBuilder`性能更好，推荐在单线程程序中使用

**线程安全的 Collection**
- `List，Set，Map`这些都不是线程安全的类型
- Java 提供了线程安全的 Collections 类型版本
    - 确保方法是原子的
    - 原子方法：动作的内部操作不会同其他操作交叉，不会产生部分完成的情况

```java
private static Map<Integer, Boolean> cache = 
    Collections.synchronizedMap(new HashMap<>());
```

**一些要点**
- 不要绕开包装类，统一采用包装类的形式(Don not circumvent the wrapper)[^6]
    - 确保抛弃对底层非线程安全容器类的引用，并只通过同步的包装来访问它
    - 新的`HashMap`只传递给`synchronizedMap`，并且永远不会存储在其他地方
    - 因为底层的容器仍然是可变的，引用它的代码可以规避不变性，失去了包装的意义
- 迭代器仍然是线程不安全的(Iterators are still not threadsafe)
    - 即使`collection`自己调用的`get(), put(), add(), etc`是线程安全的，被`collection`创建的迭代器也是不安全的
    - 所以，你不能使用`iterator(), or the for loop syntax:`
        - `for (String s: list){...}`
    - 解决方法是将在需要迭代`collection`时获取集合的锁[^7]
- 原子操作不足以完全防止竞争，例如检查列表是否至少有一个元素，然后获取该元素
    - `if (!list,isEmpty()) { String s = list .get(0);...}`
    - 即使你已经把 list 变为同步包装的 list ，上述代码依然会有竞争条件，因为另一个线程可能删除一个元素在`isEmpty()call 和 get()call` 之间

![](_v_images/_1528208164_26874.png)

包装的实现是将所有的实际工作委托给指定的容器，但在容器的基础上添加额外的功能。
##### 4) Locks and Synchronization
**并发程序的正确性不应依赖于事件的时间。**

Synchronization：防止多个线程同时访问共享数据

- 锁定是一种实现同步的技术
    - 锁是一种抽象，某时刻最多只允许一个线程拥有锁（即意味着一个线程告诉其他的线程：我正在修改这个东西，不要现在动他）
- 锁有两个操作：
    - **acquire：**获取锁的所有权，如果锁被其他进程拥有，那么进入阻塞状态，等待锁释放之后，再与其他进程争夺锁的所有权
    - **release：**释放锁的所有权
- 使用锁还可以确保锁的所有者始终查看最新的数据
- 阻塞一般意味着线程等待（不再继续工作），直到一个事件发生。[^8]

**Recall : Steps to develop an ADT**
- 指定：定义操作
- 测试：为操作设计测试用例
- Rep：选择不变量
    - 简单，强有力
    - 写 AF 和 RI，并且在每一个 constructor, producer, mutator 执行 `CheckRep()`来核对不变量

**加入 Synchronize**
- 阐述如何使 rep 线程安全
- 写入表示不变性的说明中，以便代码维护者知道你使如何为类设计线程安全性的

例子

![](_v_images/_1528241233_29758.png)

不好的方案
![](_v_images/_1528241488_24781.png)

较好的解决方案（类似光标）
![](_v_images/_1528241299_23777.png)

![](_v_images/_1528241321_25238.png)

Gap buffer（示范 RI 和 AF 如何书写）
```java
public class GrpBuffer implements EditBuffer{
    private char[] a;
    private int gapStart;
    private int gapLength;
    //Rep invariant;
    //    a != null
    //    0 <= gapStart <= a.length
    //    0 <= gapLength <= a.length - gapStart
    //Abstraction function
    //    represents the sequence a[0],...a[gapStart - 1], a[gapStart+gapLength],...,a[Length-1]
```

###### (1) Synchronized Blocks and Methods
**Locking**

Java 将锁定机制作为内置语言提供

同步是围绕内部锁或监视器锁实体构建的，（API规范通常将此实体简称为“监视器”）。在同步时：强制对象状态的独占访问和建立 happens-before 关系，内部锁都起作用
- 每个类及其所有对象实例都有一个锁

### 10.2 消息传递和可视化接口

#### Network sockets
- socket（套接字）是用于发送和/或接受数据的网络连接中的端点（socket 本质是 API，对 TCP / IP 的封装

#### 2. 通过线程进行信息传递
- 在客户端和服务器端的进程间传递消息
- 在同一进程的线程间传递消息，比通过锁定机制共享内存更受欢迎
- **使用同步队列在线程之间传递消息**

生产者消费者模式



[^1]:HV这个单词我都没有查到什么意思。。。

[^2]: 没有分清`cohesion`和`coupling`的区别

[^3]:可理解性说的是什么意思？给出的图片想要说明什么？

[^4]:例子没有理解

[^5]:如何构造，举出一个例子

[^6]:什么是包装类

[^7]:获取集合的锁？

[^8]:什么事件
